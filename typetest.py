# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'typerrr.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont, QColor, QTextCharFormat , QTextCursor
from PyQt5.QtWidgets import  QFrame,  QLineEdit, QLineEdit
from PyQt5.QtCore import Qt, QTimer
import random


class Ui_main(object):
    def setupUi(self, MainWindow):  
        self.all_texts = ["Sun blazed down on the arid desert, baking the sand until it felt like fire. Sweat dripped down his face as he trudged forward, his water supply dwindling with each step. Suddenly, he spotted an oasis in the distance – salvation was within reach!", "Crisp autumn breeze rustled through the trees, sending a cascade of orange and yellow leaves tumbling to the ground. The scent of woodsmoke filled the air, and she pulled her sweater tighter around her shoulders as she walked.", "City was alive with the sounds of honking horns and rushing crowds. The skyscrapers loomed overhead like monoliths, and the streets were paved with an endless sea of concrete. Amidst the chaos, he felt a sense of exhilaration – this was where he belonged.", "Storm raged outside, lightning illuminating the darkened room with each bolt. She huddled under the covers, listening to the rain pound against the windowpane. As the thunder grew louder, she felt a sense of unease – was she truly safe?", "Music thumped through the club, reverberating in his chest like a second heartbeat. The flashing lights and pulsing energy of the dance floor consumed him, and he lost himself in the moment. For a few brief hours, nothing else mattered.", "Airplane soared through the sky, leaving behind a trail of white vapor. He gazed out the window, marveling at the sight of the world far below. Despite his fear of heights, he felt a sense of wonder and awe – how incredible it was to be so high above everything!", "Clock ticked loudly in the empty room, a reminder of the time slipping away. He had a deadline looming, but his mind was blank – writer's block had struck again. He tried to focus, but the words refused to come, and frustration bubbled up inside him.", "Scent of fresh-baked bread wafted through the kitchen, making his mouth water. He pulled the golden loaf out of the oven, admiring its perfectly crusty exterior. As he sliced into it, he knew that this was the one thing he could always count on – the comfort of home.", "Waves crashed against the rocky shore, sending a spray of mist into the air. The sea stretched out before her, an endless expanse of blue and green. As she watched the sun dip below the horizon, she felt a sense of peace – here, she was truly free.", "Park was filled with laughter and chatter, a hub of activity on a sunny day. Children chased each other through the grass, while their parents lounged on blankets and sipped cold drinks. For a moment, he forgot his worries and simply enjoyed the simple pleasures of life."]

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 290)
        font = QtGui.QFont()
        font.setKerning(True)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-color: rgb(250, 234, 214);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.restart = QtWidgets.QPushButton(self.centralwidget)
        
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.restart.setFont(font)
        self.restart.setStyleSheet("background-color: rgb(255, 240, 223);\n"
"color: rgb(98, 156, 121);")
        self.restart.setObjectName("restart")
        self.timer = QtWidgets.QLabel(self.centralwidget)
        self.timer.setGeometry(QtCore.QRect(50, 25, 51, 40))
        font = QtGui.QFont()
        font.setFamily("Sylfaen")
        font.setPointSize(25)
        self.timer.setFont(font)
        self.timer.setStyleSheet("color: rgb(98, 156, 121);")
        self.timer.setObjectName("timer")
        self.text_show = QtWidgets.QTextEdit(self.centralwidget)
        self.text_show.setGeometry(QtCore.QRect(55, 105, 931, 160))
        self.text_show.setObjectName("text_show")
        self.tim = QTimer()
        self.step = 30
        self.tim.timeout.connect(self.update_func)
        self.time_go = False

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.restart.setFocusPolicy(Qt.NoFocus)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setStyleSheet("background-color: rgba(0, 0, 0, 0);")
        self.restart.setGeometry(QtCore.QRect(950, 15, 60, 60))
        self.label.setObjectName("label")
        self.label.setGeometry(0, 0, 1050, 290)

        self.line_edit = QLineEdit(self.centralwidget)
        self.line_edit.setObjectName("line_edit")
        self.line_edit.setGeometry(0, 0, 0, 0)
        self.line_edit.setStyleSheet("background-color: rgba(0, 0, 0, 100);")
        self.line_edit.setFrame(False)
        self.line_edit.setFocus()
        self.line_edit.setGeometry(0, 0, 0, 0)
        self.restart.raise_()

        self.last = QtWidgets.QLabel(self.centralwidget)
        self.last.setGeometry(QtCore.QRect(300, 125, 500, 60))
        font = QtGui.QFont()
        font.setFamily("Sylfaen")
        font.setPointSize(25)
        self.last.setFont(font)
        self.last.setStyleSheet("color: rgb(98, 156, 121);")
        self.last.setObjectName("last")
        self.last.setVisible(False)

        
        self.that_size = 0
        self.that_cursor = 0
        self.line_edit.textChanged.connect(self.on_text_changed)
        self.change_curs(0)
        self.cnt_fale = 0
        self.cnt_true = 0
        self.add_function()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.restart.setText(_translate("MainWindow", "↻"))
        self.timer.setText(_translate("MainWindow", "30"))

        self.text_show.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/text_showict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt;\">" + self.all_texts[random.randint(0, 9)] + "</span></p></body></html>"))
        self.text_show.setReadOnly(True)

        self.text_show.setFrameStyle(QFrame.NoFrame)
        self.text_show.setTextInteractionFlags (QtCore.Qt.NoTextInteraction)  
        self.text_show.setFont(QFont('MS Shell Dlg 2', 18))
    
    def add_function(self): 
        self.restart.clicked.connect(lambda: self.resta())
    def resta(self):
        self.cnt_true = 0
        self.cnt_fale = 0
        self.text_show.setVisible(True)
        self.last.setVisible(False)
        self.text_show.setText(self.all_texts[random.randint(0, 9)])
        self.text_show.setFont(QFont('MS Shell Dlg 2', 16))
        self.line_edit.clear()
        
        self.line_edit.setFocus() 
        cur = self.text_show.textCursor() 
        cur.setPosition(0)
        cur.setPosition(len(self.text_show.toPlainText()), QTextCursor.KeepAnchor)
        chr = QTextCharFormat()
        chr.setBackground(QColor("#faead6"))
        cur.setCharFormat(chr)
        self.that_cursor = 0
        
        self.change_curs(0)
    def on_text_changed(self):
        txt = self.line_edit.text()
        str = self.text_show.toPlainText()
        ind = len(txt) - 1
        if (len(txt) >= len(str)):
            self.end()
            return
        if (self.that_size == 0 and len(txt) != 0 ):
            self.tim.start(1000)
        elif (len(txt) == 0):
            self.tim.stop()
            self.step = 30
            self.timer.setText("30")
        if (len(txt) - self.that_size > 1):
            self.resta()
        elif (self.that_size - len(txt) > 1):
            for i in range(ind + 1, self.that_size + 1):
                self.change_curs(i)
            self.change_curs(ind + 1)
        elif (self.that_size - len(txt) == 1): 
            self.change_curs(ind + 1)

        elif (txt[ind] ==str[ind]):
            self.cnt_true += 1
            flag = True
            if str[ind] == " ":
                flag = False
            self.change_curs(ind + 1)
            if flag == True:
                self.change_color(ind, 1)
            else:
                cur = self.text_show.textCursor() 
                cur.setPosition(ind),
                cur.setPosition(ind + 1, QTextCursor.KeepAnchor)
                cur.removeSelectedText()
                curs = self.text_show.textCursor() 
                curs.setPosition(ind)
                chr = QTextCharFormat() 
                font = QFont()
                font.setPointSize(16)
                chr.setFont(font)
                chr.setFontUnderline(True)
                chr.setUnderlineColor(QColor("#37dc25"))
                chr.setUnderlineStyle(QTextCharFormat.SingleUnderline)
                curs.setCharFormat(chr)
                curs.insertText(" ")
        else:
            self.cnt_fale += 1
            flag = True
            if str[ind] == " ": 
                flag = False
            self.change_curs(ind + 1)
            if flag == True:
                self.change_color(ind, 2)
            else: 
                cur = self.text_show.textCursor() 
                cur.setPosition(ind),
                cur.setPosition(ind + 1, QTextCursor.KeepAnchor)
                cur.removeSelectedText()
                curs = self.text_show.textCursor() 
                curs.setPosition(ind)
                chr = QTextCharFormat() 
                font = QFont()
                font.setPointSize(16)
                chr.setFont(font)
                chr.setFontUnderline(True)
                chr.setUnderlineColor(QColor('#ed2828'))
                chr.setUnderlineStyle(QTextCharFormat.SingleUnderline)
                curs.setCharFormat(chr)
                curs.insertText(" ")
        self.that_size = len(txt)
    def change_curs(self, i):
            
            sym = self.text_show.toPlainText()[self.that_cursor]
            cur = self.text_show.textCursor() 
            cur.setPosition(self.that_cursor),
            cur.setPosition(self.that_cursor + 1, QTextCursor.KeepAnchor)
            cur.removeSelectedText()
            curs = self.text_show.textCursor() 
            curs.setPosition(self.that_cursor)
            chr = QTextCharFormat() 
            font = QFont()
            font.setPointSize(16)
            chr.setFont(font)
            chr.setBackground(QColor("#faead6"))
            curs.setCharFormat(chr)
            curs.insertText(sym)
            self.that_cursor = i
            sym = self.text_show.toPlainText()[i]
            cur = self.text_show.textCursor() 
            cur.setPosition(i),
            cur.setPosition(i + 1, QTextCursor.KeepAnchor)
            cur.removeSelectedText()
            curs = self.text_show.textCursor() 
            
            curs.setPosition(i)
            chr = QTextCharFormat() 
            font = QFont()
            font.setPointSize(16)
            chr.setFont(font)
            chr.setBackground(QColor("#c7b7cc"))
            curs.setCharFormat(chr)
            curs.insertText(sym)
    def change_color(self, i, col):
        temp = self.text_show.toPlainText() 
        sym = temp[i]
        cur = self.text_show.textCursor() 
        cur.setPosition(i),
        cur.setPosition(i + 1, QTextCursor.KeepAnchor)
        cur.removeSelectedText()
        
        cursor = self.text_show.textCursor()

        cursor.setPosition(i)

        char_format = QTextCharFormat()
        if col == 0:
            char_format.setForeground(QColor('#000000'))
        elif col == 2:
            char_format.setForeground(QColor('#ed2828'))
        else:
            char_format.setForeground(QColor('#37dc25'))
        font = QFont()
        font.setPointSize(16)
        char_format.setFont(font)
        cursor.setCharFormat(char_format)

        cursor.insertText(sym)
    def update_func(self):
        self.step -= 1
        self.timer.setText(str(self.step))
        if self.step == 0:
            self.end()
    def end(self):
        self.tim.stop()
        self.text_show.setVisible(False)
        cnt_wpm = 0
        txt = self.line_edit.text()
        str = self.text_show.toPlainText()
        for i in range (len(txt)): 
            if i >= len(str):
                break
            if txt[i] == str[i]:
                cnt_wpm += 1
        cnt_wpm = cnt_wpm//5
        wpm = round(cnt_wpm/(30 - self.step) * 60)
        acc = round((self.cnt_true)/(self.cnt_true + self.cnt_fale) * 100)
        wpm = "% s" % wpm
        acc = "% s" % acc
        the_lastest = "wpm: " + wpm + "          acc: " + acc + "%"
        self.last.setText(the_lastest)
        self.last.setVisible(True)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_main()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())